Terminals unused in grammar

   KW_CHAR
   KW_INT
   KW_FOR
   TOKEN_ERROR


Rules useless in parser due to conflicts

   40 lcmd: %empty


State 30 conflicts: 1 shift/reduce
State 44 conflicts: 7 shift/reduce
State 57 conflicts: 2 shift/reduce
State 59 conflicts: 1 reduce/reduce
State 74 conflicts: 1 shift/reduce
State 85 conflicts: 1 reduce/reduce
State 95 conflicts: 2 shift/reduce
State 97 conflicts: 12 shift/reduce
State 104 conflicts: 2 shift/reduce
State 114 conflicts: 1 reduce/reduce
State 118 conflicts: 7 shift/reduce
State 124 conflicts: 12 shift/reduce
State 125 conflicts: 12 shift/reduce
State 126 conflicts: 12 shift/reduce
State 127 conflicts: 12 shift/reduce
State 128 conflicts: 12 shift/reduce
State 129 conflicts: 12 shift/reduce
State 131 conflicts: 12 shift/reduce
State 132 conflicts: 12 shift/reduce
State 133 conflicts: 12 shift/reduce
State 134 conflicts: 12 shift/reduce
State 135 conflicts: 12 shift/reduce
State 136 conflicts: 12 shift/reduce
State 139 conflicts: 7 shift/reduce
State 144 conflicts: 1 shift/reduce
State 146 conflicts: 7 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decl

    2 decl: dec decl
    3     | %empty

    4 dec: decvar
    5    | decvetor
    6    | decfunction

    7 decvar: TK_IDENTIFIER ':' typevar '=' literal ';'

    8 decvetor: TK_IDENTIFIER ':' typevar '[' LIT_INTEGER ']' decv ';'
    9         | TK_IDENTIFIER ':' typevar '[' LIT_INTEGER ']' ';'

   10 decfunction: '(' typevar ')' TK_IDENTIFIER '(' paramlist ')' cmd

   11 decv: LIT_INTEGER decv
   12     | LIT_CHAR ' ' decv
   13     | LIT_REAL ' ' decv
   14     | %empty

   15 typevar: KW_BYTE
   16        | KW_FLOAT
   17        | KW_SHORT
   18        | KW_LONG
   19        | KW_DOUBLE

   20 literal: LIT_INTEGER
   21        | LIT_CHAR
   22        | LIT_REAL

   23 paramlist: TK_IDENTIFIER ':' typevar rest
   24          | literal rest
   25          | TK_IDENTIFIER rest
   26          | %empty

   27 rest: ',' TK_IDENTIFIER ':' typevar rest
   28     | ',' literal rest
   29     | TK_IDENTIFIER rest
   30     | %empty

   31 cmd: attribution
   32    | flux_control
   33    | inout
   34    | body
   35    | %empty

   36 body: '{' lcmd '}'

   37 lcmd: cmd ';' lcmd
   38     | dec lcmd
   39     | cmd
   40     | %empty

   41 attribution: TK_IDENTIFIER '=' exp
   42            | TK_IDENTIFIER '[' exp ']' '=' exp

   43 flux_control: KW_IF '(' exp ')' KW_THEN cmd
   44             | KW_IF '(' exp ')' KW_THEN cmd KW_ELSE cmd
   45             | KW_WHILE '(' exp ')' cmd

   46 inout: KW_PRINT print_elem
   47      | KW_READ '>' TK_IDENTIFIER
   48      | KW_RETURN '(' exp ')'

   49 print_elem: LIT_STRING
   50           | LIT_STRING ',' print_elem
   51           | exp
   52           | exp ',' print_elem
   53           | %empty

   54 exp: TK_IDENTIFIER
   55    | TK_IDENTIFIER '[' exp ']'
   56    | LIT_INTEGER
   57    | LIT_CHAR
   58    | exp '+' exp
   59    | exp '-' exp
   60    | exp '*' exp
   61    | exp '/' exp
   62    | exp '<' exp
   63    | exp '>' exp
   64    | '!' exp
   65    | '(' exp ')'
   66    | exp OPERATOR_LE exp
   67    | exp OPERATOR_GE exp
   68    | exp OPERATOR_EQ exp
   69    | exp OPERATOR_NE exp
   70    | exp OPERATOR_AND exp
   71    | exp OPERATOR_OR exp
   72    | TK_IDENTIFIER '(' paramlist ')'


Terminals, with rules where they appear

$end (0) 0
' ' (32) 12 13
'!' (33) 64
'(' (40) 10 43 44 45 48 65 72
')' (41) 10 43 44 45 48 65 72
'*' (42) 60
'+' (43) 58
',' (44) 27 28 50 52
'-' (45) 59
'/' (47) 61
':' (58) 7 8 9 23 27
';' (59) 7 8 9 37
'<' (60) 62
'=' (61) 7 41 42
'>' (62) 47 63
'[' (91) 8 9 42 55
']' (93) 8 9 42 55
'{' (123) 36
'}' (125) 36
error (256)
KW_BYTE (258) 15
KW_SHORT (259) 17
KW_LONG (260) 18
KW_DOUBLE (261) 19
KW_CHAR (262)
KW_INT (263)
KW_FLOAT (264) 16
KW_IF (265) 43 44
KW_THEN (266) 43 44
KW_ELSE (267) 44
KW_WHILE (268) 45
KW_FOR (269)
KW_READ (270) 47
KW_RETURN (271) 48
KW_PRINT (272) 46
OPERATOR_LE (273) 66
OPERATOR_GE (274) 67
OPERATOR_EQ (275) 68
OPERATOR_NE (276) 69
OPERATOR_AND (277) 70
OPERATOR_OR (278) 71
TK_IDENTIFIER (279) 7 8 9 10 23 25 27 29 41 42 47 54 55 72
LIT_INTEGER (280) 8 9 11 20 56
LIT_REAL (281) 13 22
LIT_CHAR (282) 12 21 57
LIT_STRING (283) 49 50
TOKEN_ERROR (284)


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program (49)
    on left: 1, on right: 0
decl (50)
    on left: 2 3, on right: 1 2
dec (51)
    on left: 4 5 6, on right: 2 38
decvar (52)
    on left: 7, on right: 4
decvetor (53)
    on left: 8 9, on right: 5
decfunction (54)
    on left: 10, on right: 6
decv (55)
    on left: 11 12 13 14, on right: 8 11 12 13
typevar (56)
    on left: 15 16 17 18 19, on right: 7 8 9 10 23 27
literal (57)
    on left: 20 21 22, on right: 7 24 28
paramlist (58)
    on left: 23 24 25 26, on right: 10 72
rest (59)
    on left: 27 28 29 30, on right: 23 24 25 27 28 29
cmd (60)
    on left: 31 32 33 34 35, on right: 10 37 39 43 44 45
body (61)
    on left: 36, on right: 34
lcmd (62)
    on left: 37 38 39 40, on right: 36 37 38
attribution (63)
    on left: 41 42, on right: 31
flux_control (64)
    on left: 43 44 45, on right: 32
inout (65)
    on left: 46 47 48, on right: 33
print_elem (66)
    on left: 49 50 51 52 53, on right: 46 50 52
exp (67)
    on left: 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71
    72, on right: 41 42 43 44 45 48 51 52 55 58 59 60 61 62 63 64 65
    66 67 68 69 70 71


State 0

    0 $accept: . program $end

    TK_IDENTIFIER  shift, and go to state 1
    '('            shift, and go to state 2

    $default  reduce using rule 3 (decl)

    program      go to state 3
    decl         go to state 4
    dec          go to state 5
    decvar       go to state 6
    decvetor     go to state 7
    decfunction  go to state 8


State 1

    7 decvar: TK_IDENTIFIER . ':' typevar '=' literal ';'
    8 decvetor: TK_IDENTIFIER . ':' typevar '[' LIT_INTEGER ']' decv ';'
    9         | TK_IDENTIFIER . ':' typevar '[' LIT_INTEGER ']' ';'

    ':'  shift, and go to state 9


State 2

   10 decfunction: '(' . typevar ')' TK_IDENTIFIER '(' paramlist ')' cmd

    KW_BYTE    shift, and go to state 10
    KW_SHORT   shift, and go to state 11
    KW_LONG    shift, and go to state 12
    KW_DOUBLE  shift, and go to state 13
    KW_FLOAT   shift, and go to state 14

    typevar  go to state 15


State 3

    0 $accept: program . $end

    $end  shift, and go to state 16


State 4

    1 program: decl .

    $default  reduce using rule 1 (program)


State 5

    2 decl: dec . decl

    TK_IDENTIFIER  shift, and go to state 1
    '('            shift, and go to state 2

    $default  reduce using rule 3 (decl)

    decl         go to state 17
    dec          go to state 5
    decvar       go to state 6
    decvetor     go to state 7
    decfunction  go to state 8


State 6

    4 dec: decvar .

    $default  reduce using rule 4 (dec)


State 7

    5 dec: decvetor .

    $default  reduce using rule 5 (dec)


State 8

    6 dec: decfunction .

    $default  reduce using rule 6 (dec)


State 9

    7 decvar: TK_IDENTIFIER ':' . typevar '=' literal ';'
    8 decvetor: TK_IDENTIFIER ':' . typevar '[' LIT_INTEGER ']' decv ';'
    9         | TK_IDENTIFIER ':' . typevar '[' LIT_INTEGER ']' ';'

    KW_BYTE    shift, and go to state 10
    KW_SHORT   shift, and go to state 11
    KW_LONG    shift, and go to state 12
    KW_DOUBLE  shift, and go to state 13
    KW_FLOAT   shift, and go to state 14

    typevar  go to state 18


State 10

   15 typevar: KW_BYTE .

    $default  reduce using rule 15 (typevar)


State 11

   17 typevar: KW_SHORT .

    $default  reduce using rule 17 (typevar)


State 12

   18 typevar: KW_LONG .

    $default  reduce using rule 18 (typevar)


State 13

   19 typevar: KW_DOUBLE .

    $default  reduce using rule 19 (typevar)


State 14

   16 typevar: KW_FLOAT .

    $default  reduce using rule 16 (typevar)


State 15

   10 decfunction: '(' typevar . ')' TK_IDENTIFIER '(' paramlist ')' cmd

    ')'  shift, and go to state 19


State 16

    0 $accept: program $end .

    $default  accept


State 17

    2 decl: dec decl .

    $default  reduce using rule 2 (decl)


State 18

    7 decvar: TK_IDENTIFIER ':' typevar . '=' literal ';'
    8 decvetor: TK_IDENTIFIER ':' typevar . '[' LIT_INTEGER ']' decv ';'
    9         | TK_IDENTIFIER ':' typevar . '[' LIT_INTEGER ']' ';'

    '='  shift, and go to state 20
    '['  shift, and go to state 21


State 19

   10 decfunction: '(' typevar ')' . TK_IDENTIFIER '(' paramlist ')' cmd

    TK_IDENTIFIER  shift, and go to state 22


State 20

    7 decvar: TK_IDENTIFIER ':' typevar '=' . literal ';'

    LIT_INTEGER  shift, and go to state 23
    LIT_REAL     shift, and go to state 24
    LIT_CHAR     shift, and go to state 25

    literal  go to state 26


State 21

    8 decvetor: TK_IDENTIFIER ':' typevar '[' . LIT_INTEGER ']' decv ';'
    9         | TK_IDENTIFIER ':' typevar '[' . LIT_INTEGER ']' ';'

    LIT_INTEGER  shift, and go to state 27


State 22

   10 decfunction: '(' typevar ')' TK_IDENTIFIER . '(' paramlist ')' cmd

    '('  shift, and go to state 28


State 23

   20 literal: LIT_INTEGER .

    $default  reduce using rule 20 (literal)


State 24

   22 literal: LIT_REAL .

    $default  reduce using rule 22 (literal)


State 25

   21 literal: LIT_CHAR .

    $default  reduce using rule 21 (literal)


State 26

    7 decvar: TK_IDENTIFIER ':' typevar '=' literal . ';'

    ';'  shift, and go to state 29


State 27

    8 decvetor: TK_IDENTIFIER ':' typevar '[' LIT_INTEGER . ']' decv ';'
    9         | TK_IDENTIFIER ':' typevar '[' LIT_INTEGER . ']' ';'

    ']'  shift, and go to state 30


State 28

   10 decfunction: '(' typevar ')' TK_IDENTIFIER '(' . paramlist ')' cmd

    TK_IDENTIFIER  shift, and go to state 31
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    $default  reduce using rule 26 (paramlist)

    literal    go to state 32
    paramlist  go to state 33


State 29

    7 decvar: TK_IDENTIFIER ':' typevar '=' literal ';' .

    $default  reduce using rule 7 (decvar)


State 30

    8 decvetor: TK_IDENTIFIER ':' typevar '[' LIT_INTEGER ']' . decv ';'
    9         | TK_IDENTIFIER ':' typevar '[' LIT_INTEGER ']' . ';'

    LIT_INTEGER  shift, and go to state 34
    LIT_REAL     shift, and go to state 35
    LIT_CHAR     shift, and go to state 36
    ';'          shift, and go to state 37

    ';'  [reduce using rule 14 (decv)]

    decv  go to state 38


State 31

   23 paramlist: TK_IDENTIFIER . ':' typevar rest
   25          | TK_IDENTIFIER . rest

    TK_IDENTIFIER  shift, and go to state 39
    ':'            shift, and go to state 40
    ','            shift, and go to state 41

    $default  reduce using rule 30 (rest)

    rest  go to state 42


State 32

   24 paramlist: literal . rest

    TK_IDENTIFIER  shift, and go to state 39
    ','            shift, and go to state 41

    $default  reduce using rule 30 (rest)

    rest  go to state 43


State 33

   10 decfunction: '(' typevar ')' TK_IDENTIFIER '(' paramlist . ')' cmd

    ')'  shift, and go to state 44


State 34

   11 decv: LIT_INTEGER . decv

    LIT_INTEGER  shift, and go to state 34
    LIT_REAL     shift, and go to state 35
    LIT_CHAR     shift, and go to state 36

    $default  reduce using rule 14 (decv)

    decv  go to state 45


State 35

   13 decv: LIT_REAL . ' ' decv

    ' '  shift, and go to state 46


State 36

   12 decv: LIT_CHAR . ' ' decv

    ' '  shift, and go to state 47


State 37

    9 decvetor: TK_IDENTIFIER ':' typevar '[' LIT_INTEGER ']' ';' .

    $default  reduce using rule 9 (decvetor)


State 38

    8 decvetor: TK_IDENTIFIER ':' typevar '[' LIT_INTEGER ']' decv . ';'

    ';'  shift, and go to state 48


State 39

   29 rest: TK_IDENTIFIER . rest

    TK_IDENTIFIER  shift, and go to state 39
    ','            shift, and go to state 41

    $default  reduce using rule 30 (rest)

    rest  go to state 49


State 40

   23 paramlist: TK_IDENTIFIER ':' . typevar rest

    KW_BYTE    shift, and go to state 10
    KW_SHORT   shift, and go to state 11
    KW_LONG    shift, and go to state 12
    KW_DOUBLE  shift, and go to state 13
    KW_FLOAT   shift, and go to state 14

    typevar  go to state 50


State 41

   27 rest: ',' . TK_IDENTIFIER ':' typevar rest
   28     | ',' . literal rest

    TK_IDENTIFIER  shift, and go to state 51
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    literal  go to state 52


State 42

   25 paramlist: TK_IDENTIFIER rest .

    $default  reduce using rule 25 (paramlist)


State 43

   24 paramlist: literal rest .

    $default  reduce using rule 24 (paramlist)


State 44

   10 decfunction: '(' typevar ')' TK_IDENTIFIER '(' paramlist ')' . cmd

    KW_IF          shift, and go to state 53
    KW_WHILE       shift, and go to state 54
    KW_READ        shift, and go to state 55
    KW_RETURN      shift, and go to state 56
    KW_PRINT       shift, and go to state 57
    TK_IDENTIFIER  shift, and go to state 58
    '{'            shift, and go to state 59

    KW_IF          [reduce using rule 35 (cmd)]
    KW_WHILE       [reduce using rule 35 (cmd)]
    KW_READ        [reduce using rule 35 (cmd)]
    KW_RETURN      [reduce using rule 35 (cmd)]
    KW_PRINT       [reduce using rule 35 (cmd)]
    TK_IDENTIFIER  [reduce using rule 35 (cmd)]
    '{'            [reduce using rule 35 (cmd)]
    $default       reduce using rule 35 (cmd)

    cmd           go to state 60
    body          go to state 61
    attribution   go to state 62
    flux_control  go to state 63
    inout         go to state 64


State 45

   11 decv: LIT_INTEGER decv .

    $default  reduce using rule 11 (decv)


State 46

   13 decv: LIT_REAL ' ' . decv

    LIT_INTEGER  shift, and go to state 34
    LIT_REAL     shift, and go to state 35
    LIT_CHAR     shift, and go to state 36

    $default  reduce using rule 14 (decv)

    decv  go to state 65


State 47

   12 decv: LIT_CHAR ' ' . decv

    LIT_INTEGER  shift, and go to state 34
    LIT_REAL     shift, and go to state 35
    LIT_CHAR     shift, and go to state 36

    $default  reduce using rule 14 (decv)

    decv  go to state 66


State 48

    8 decvetor: TK_IDENTIFIER ':' typevar '[' LIT_INTEGER ']' decv ';' .

    $default  reduce using rule 8 (decvetor)


State 49

   29 rest: TK_IDENTIFIER rest .

    $default  reduce using rule 29 (rest)


State 50

   23 paramlist: TK_IDENTIFIER ':' typevar . rest

    TK_IDENTIFIER  shift, and go to state 39
    ','            shift, and go to state 41

    $default  reduce using rule 30 (rest)

    rest  go to state 67


State 51

   27 rest: ',' TK_IDENTIFIER . ':' typevar rest

    ':'  shift, and go to state 68


State 52

   28 rest: ',' literal . rest

    TK_IDENTIFIER  shift, and go to state 39
    ','            shift, and go to state 41

    $default  reduce using rule 30 (rest)

    rest  go to state 69


State 53

   43 flux_control: KW_IF . '(' exp ')' KW_THEN cmd
   44             | KW_IF . '(' exp ')' KW_THEN cmd KW_ELSE cmd

    '('  shift, and go to state 70


State 54

   45 flux_control: KW_WHILE . '(' exp ')' cmd

    '('  shift, and go to state 71


State 55

   47 inout: KW_READ . '>' TK_IDENTIFIER

    '>'  shift, and go to state 72


State 56

   48 inout: KW_RETURN . '(' exp ')'

    '('  shift, and go to state 73


State 57

   46 inout: KW_PRINT . print_elem

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    LIT_STRING     shift, and go to state 77
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    TK_IDENTIFIER  [reduce using rule 53 (print_elem)]
    '('            [reduce using rule 53 (print_elem)]
    $default       reduce using rule 53 (print_elem)

    print_elem  go to state 80
    exp         go to state 81


State 58

   41 attribution: TK_IDENTIFIER . '=' exp
   42            | TK_IDENTIFIER . '[' exp ']' '=' exp

    '='  shift, and go to state 82
    '['  shift, and go to state 83


State 59

   36 body: '{' . lcmd '}'

    KW_IF          shift, and go to state 53
    KW_WHILE       shift, and go to state 54
    KW_READ        shift, and go to state 55
    KW_RETURN      shift, and go to state 56
    KW_PRINT       shift, and go to state 57
    TK_IDENTIFIER  shift, and go to state 84
    '('            shift, and go to state 2
    '{'            shift, and go to state 59

    '}'       reduce using rule 35 (cmd)
    '}'       [reduce using rule 40 (lcmd)]
    $default  reduce using rule 35 (cmd)

    dec           go to state 85
    decvar        go to state 6
    decvetor      go to state 7
    decfunction   go to state 8
    cmd           go to state 86
    body          go to state 61
    lcmd          go to state 87
    attribution   go to state 62
    flux_control  go to state 63
    inout         go to state 64


State 60

   10 decfunction: '(' typevar ')' TK_IDENTIFIER '(' paramlist ')' cmd .

    $default  reduce using rule 10 (decfunction)


State 61

   34 cmd: body .

    $default  reduce using rule 34 (cmd)


State 62

   31 cmd: attribution .

    $default  reduce using rule 31 (cmd)


State 63

   32 cmd: flux_control .

    $default  reduce using rule 32 (cmd)


State 64

   33 cmd: inout .

    $default  reduce using rule 33 (cmd)


State 65

   13 decv: LIT_REAL ' ' decv .

    $default  reduce using rule 13 (decv)


State 66

   12 decv: LIT_CHAR ' ' decv .

    $default  reduce using rule 12 (decv)


State 67

   23 paramlist: TK_IDENTIFIER ':' typevar rest .

    $default  reduce using rule 23 (paramlist)


State 68

   27 rest: ',' TK_IDENTIFIER ':' . typevar rest

    KW_BYTE    shift, and go to state 10
    KW_SHORT   shift, and go to state 11
    KW_LONG    shift, and go to state 12
    KW_DOUBLE  shift, and go to state 13
    KW_FLOAT   shift, and go to state 14

    typevar  go to state 88


State 69

   28 rest: ',' literal rest .

    $default  reduce using rule 28 (rest)


State 70

   43 flux_control: KW_IF '(' . exp ')' KW_THEN cmd
   44             | KW_IF '(' . exp ')' KW_THEN cmd KW_ELSE cmd

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 89


State 71

   45 flux_control: KW_WHILE '(' . exp ')' cmd

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 90


State 72

   47 inout: KW_READ '>' . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 91


State 73

   48 inout: KW_RETURN '(' . exp ')'

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 92


State 74

   54 exp: TK_IDENTIFIER .
   55    | TK_IDENTIFIER . '[' exp ']'
   72    | TK_IDENTIFIER . '(' paramlist ')'

    '['  shift, and go to state 93
    '('  shift, and go to state 94

    '('       [reduce using rule 54 (exp)]
    $default  reduce using rule 54 (exp)


State 75

   56 exp: LIT_INTEGER .

    $default  reduce using rule 56 (exp)


State 76

   57 exp: LIT_CHAR .

    $default  reduce using rule 57 (exp)


State 77

   49 print_elem: LIT_STRING .
   50           | LIT_STRING . ',' print_elem

    ','  shift, and go to state 95

    $default  reduce using rule 49 (print_elem)


State 78

   65 exp: '(' . exp ')'

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 96


State 79

   64 exp: '!' . exp

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 97


State 80

   46 inout: KW_PRINT print_elem .

    $default  reduce using rule 46 (inout)


State 81

   51 print_elem: exp .
   52           | exp . ',' print_elem
   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    ','           shift, and go to state 104
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110

    $default  reduce using rule 51 (print_elem)


State 82

   41 attribution: TK_IDENTIFIER '=' . exp

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 111


State 83

   42 attribution: TK_IDENTIFIER '[' . exp ']' '=' exp

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 112


State 84

    7 decvar: TK_IDENTIFIER . ':' typevar '=' literal ';'
    8 decvetor: TK_IDENTIFIER . ':' typevar '[' LIT_INTEGER ']' decv ';'
    9         | TK_IDENTIFIER . ':' typevar '[' LIT_INTEGER ']' ';'
   41 attribution: TK_IDENTIFIER . '=' exp
   42            | TK_IDENTIFIER . '[' exp ']' '=' exp

    ':'  shift, and go to state 9
    '='  shift, and go to state 82
    '['  shift, and go to state 83


State 85

   38 lcmd: dec . lcmd

    KW_IF          shift, and go to state 53
    KW_WHILE       shift, and go to state 54
    KW_READ        shift, and go to state 55
    KW_RETURN      shift, and go to state 56
    KW_PRINT       shift, and go to state 57
    TK_IDENTIFIER  shift, and go to state 84
    '('            shift, and go to state 2
    '{'            shift, and go to state 59

    '}'       reduce using rule 35 (cmd)
    '}'       [reduce using rule 40 (lcmd)]
    $default  reduce using rule 35 (cmd)

    dec           go to state 85
    decvar        go to state 6
    decvetor      go to state 7
    decfunction   go to state 8
    cmd           go to state 86
    body          go to state 61
    lcmd          go to state 113
    attribution   go to state 62
    flux_control  go to state 63
    inout         go to state 64


State 86

   37 lcmd: cmd . ';' lcmd
   39     | cmd .

    ';'  shift, and go to state 114

    $default  reduce using rule 39 (lcmd)


State 87

   36 body: '{' lcmd . '}'

    '}'  shift, and go to state 115


State 88

   27 rest: ',' TK_IDENTIFIER ':' typevar . rest

    TK_IDENTIFIER  shift, and go to state 39
    ','            shift, and go to state 41

    $default  reduce using rule 30 (rest)

    rest  go to state 116


State 89

   43 flux_control: KW_IF '(' exp . ')' KW_THEN cmd
   44             | KW_IF '(' exp . ')' KW_THEN cmd KW_ELSE cmd
   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    ')'           shift, and go to state 117
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110


State 90

   45 flux_control: KW_WHILE '(' exp . ')' cmd
   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    ')'           shift, and go to state 118
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110


State 91

   47 inout: KW_READ '>' TK_IDENTIFIER .

    $default  reduce using rule 47 (inout)


State 92

   48 inout: KW_RETURN '(' exp . ')'
   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    ')'           shift, and go to state 119
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110


State 93

   55 exp: TK_IDENTIFIER '[' . exp ']'

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 120


State 94

   72 exp: TK_IDENTIFIER '(' . paramlist ')'

    TK_IDENTIFIER  shift, and go to state 31
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    $default  reduce using rule 26 (paramlist)

    literal    go to state 32
    paramlist  go to state 121


State 95

   50 print_elem: LIT_STRING ',' . print_elem

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    LIT_STRING     shift, and go to state 77
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    TK_IDENTIFIER  [reduce using rule 53 (print_elem)]
    '('            [reduce using rule 53 (print_elem)]
    $default       reduce using rule 53 (print_elem)

    print_elem  go to state 122
    exp         go to state 81


State 96

   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   65    | '(' exp . ')'
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    ')'           shift, and go to state 123
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110


State 97

   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   64    | '!' exp .
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110

    OPERATOR_LE   [reduce using rule 64 (exp)]
    OPERATOR_GE   [reduce using rule 64 (exp)]
    OPERATOR_EQ   [reduce using rule 64 (exp)]
    OPERATOR_NE   [reduce using rule 64 (exp)]
    OPERATOR_AND  [reduce using rule 64 (exp)]
    OPERATOR_OR   [reduce using rule 64 (exp)]
    '>'           [reduce using rule 64 (exp)]
    '+'           [reduce using rule 64 (exp)]
    '-'           [reduce using rule 64 (exp)]
    '*'           [reduce using rule 64 (exp)]
    '/'           [reduce using rule 64 (exp)]
    '<'           [reduce using rule 64 (exp)]
    $default      reduce using rule 64 (exp)


State 98

   66 exp: exp OPERATOR_LE . exp

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 124


State 99

   67 exp: exp OPERATOR_GE . exp

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 125


State 100

   68 exp: exp OPERATOR_EQ . exp

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 126


State 101

   69 exp: exp OPERATOR_NE . exp

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 127


State 102

   70 exp: exp OPERATOR_AND . exp

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 128


State 103

   71 exp: exp OPERATOR_OR . exp

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 129


State 104

   52 print_elem: exp ',' . print_elem

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    LIT_STRING     shift, and go to state 77
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    TK_IDENTIFIER  [reduce using rule 53 (print_elem)]
    '('            [reduce using rule 53 (print_elem)]
    $default       reduce using rule 53 (print_elem)

    print_elem  go to state 130
    exp         go to state 81


State 105

   63 exp: exp '>' . exp

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 131


State 106

   58 exp: exp '+' . exp

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 132


State 107

   59 exp: exp '-' . exp

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 133


State 108

   60 exp: exp '*' . exp

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 134


State 109

   61 exp: exp '/' . exp

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 135


State 110

   62 exp: exp '<' . exp

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 136


State 111

   41 attribution: TK_IDENTIFIER '=' exp .
   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110

    $default  reduce using rule 41 (attribution)


State 112

   42 attribution: TK_IDENTIFIER '[' exp . ']' '=' exp
   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    ']'           shift, and go to state 137
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110


State 113

   38 lcmd: dec lcmd .

    $default  reduce using rule 38 (lcmd)


State 114

   37 lcmd: cmd ';' . lcmd

    KW_IF          shift, and go to state 53
    KW_WHILE       shift, and go to state 54
    KW_READ        shift, and go to state 55
    KW_RETURN      shift, and go to state 56
    KW_PRINT       shift, and go to state 57
    TK_IDENTIFIER  shift, and go to state 84
    '('            shift, and go to state 2
    '{'            shift, and go to state 59

    '}'       reduce using rule 35 (cmd)
    '}'       [reduce using rule 40 (lcmd)]
    $default  reduce using rule 35 (cmd)

    dec           go to state 85
    decvar        go to state 6
    decvetor      go to state 7
    decfunction   go to state 8
    cmd           go to state 86
    body          go to state 61
    lcmd          go to state 138
    attribution   go to state 62
    flux_control  go to state 63
    inout         go to state 64


State 115

   36 body: '{' lcmd '}' .

    $default  reduce using rule 36 (body)


State 116

   27 rest: ',' TK_IDENTIFIER ':' typevar rest .

    $default  reduce using rule 27 (rest)


State 117

   43 flux_control: KW_IF '(' exp ')' . KW_THEN cmd
   44             | KW_IF '(' exp ')' . KW_THEN cmd KW_ELSE cmd

    KW_THEN  shift, and go to state 139


State 118

   45 flux_control: KW_WHILE '(' exp ')' . cmd

    KW_IF          shift, and go to state 53
    KW_WHILE       shift, and go to state 54
    KW_READ        shift, and go to state 55
    KW_RETURN      shift, and go to state 56
    KW_PRINT       shift, and go to state 57
    TK_IDENTIFIER  shift, and go to state 58
    '{'            shift, and go to state 59

    KW_IF          [reduce using rule 35 (cmd)]
    KW_WHILE       [reduce using rule 35 (cmd)]
    KW_READ        [reduce using rule 35 (cmd)]
    KW_RETURN      [reduce using rule 35 (cmd)]
    KW_PRINT       [reduce using rule 35 (cmd)]
    TK_IDENTIFIER  [reduce using rule 35 (cmd)]
    '{'            [reduce using rule 35 (cmd)]
    $default       reduce using rule 35 (cmd)

    cmd           go to state 140
    body          go to state 61
    attribution   go to state 62
    flux_control  go to state 63
    inout         go to state 64


State 119

   48 inout: KW_RETURN '(' exp ')' .

    $default  reduce using rule 48 (inout)


State 120

   55 exp: TK_IDENTIFIER '[' exp . ']'
   58    | exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    ']'           shift, and go to state 141
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110


State 121

   72 exp: TK_IDENTIFIER '(' paramlist . ')'

    ')'  shift, and go to state 142


State 122

   50 print_elem: LIT_STRING ',' print_elem .

    $default  reduce using rule 50 (print_elem)


State 123

   65 exp: '(' exp ')' .

    $default  reduce using rule 65 (exp)


State 124

   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   66    | exp OPERATOR_LE exp .
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110

    OPERATOR_LE   [reduce using rule 66 (exp)]
    OPERATOR_GE   [reduce using rule 66 (exp)]
    OPERATOR_EQ   [reduce using rule 66 (exp)]
    OPERATOR_NE   [reduce using rule 66 (exp)]
    OPERATOR_AND  [reduce using rule 66 (exp)]
    OPERATOR_OR   [reduce using rule 66 (exp)]
    '>'           [reduce using rule 66 (exp)]
    '+'           [reduce using rule 66 (exp)]
    '-'           [reduce using rule 66 (exp)]
    '*'           [reduce using rule 66 (exp)]
    '/'           [reduce using rule 66 (exp)]
    '<'           [reduce using rule 66 (exp)]
    $default      reduce using rule 66 (exp)


State 125

   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   67    | exp OPERATOR_GE exp .
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110

    OPERATOR_LE   [reduce using rule 67 (exp)]
    OPERATOR_GE   [reduce using rule 67 (exp)]
    OPERATOR_EQ   [reduce using rule 67 (exp)]
    OPERATOR_NE   [reduce using rule 67 (exp)]
    OPERATOR_AND  [reduce using rule 67 (exp)]
    OPERATOR_OR   [reduce using rule 67 (exp)]
    '>'           [reduce using rule 67 (exp)]
    '+'           [reduce using rule 67 (exp)]
    '-'           [reduce using rule 67 (exp)]
    '*'           [reduce using rule 67 (exp)]
    '/'           [reduce using rule 67 (exp)]
    '<'           [reduce using rule 67 (exp)]
    $default      reduce using rule 67 (exp)


State 126

   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   68    | exp OPERATOR_EQ exp .
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110

    OPERATOR_LE   [reduce using rule 68 (exp)]
    OPERATOR_GE   [reduce using rule 68 (exp)]
    OPERATOR_EQ   [reduce using rule 68 (exp)]
    OPERATOR_NE   [reduce using rule 68 (exp)]
    OPERATOR_AND  [reduce using rule 68 (exp)]
    OPERATOR_OR   [reduce using rule 68 (exp)]
    '>'           [reduce using rule 68 (exp)]
    '+'           [reduce using rule 68 (exp)]
    '-'           [reduce using rule 68 (exp)]
    '*'           [reduce using rule 68 (exp)]
    '/'           [reduce using rule 68 (exp)]
    '<'           [reduce using rule 68 (exp)]
    $default      reduce using rule 68 (exp)


State 127

   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   69    | exp OPERATOR_NE exp .
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110

    OPERATOR_LE   [reduce using rule 69 (exp)]
    OPERATOR_GE   [reduce using rule 69 (exp)]
    OPERATOR_EQ   [reduce using rule 69 (exp)]
    OPERATOR_NE   [reduce using rule 69 (exp)]
    OPERATOR_AND  [reduce using rule 69 (exp)]
    OPERATOR_OR   [reduce using rule 69 (exp)]
    '>'           [reduce using rule 69 (exp)]
    '+'           [reduce using rule 69 (exp)]
    '-'           [reduce using rule 69 (exp)]
    '*'           [reduce using rule 69 (exp)]
    '/'           [reduce using rule 69 (exp)]
    '<'           [reduce using rule 69 (exp)]
    $default      reduce using rule 69 (exp)


State 128

   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   70    | exp OPERATOR_AND exp .
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110

    OPERATOR_LE   [reduce using rule 70 (exp)]
    OPERATOR_GE   [reduce using rule 70 (exp)]
    OPERATOR_EQ   [reduce using rule 70 (exp)]
    OPERATOR_NE   [reduce using rule 70 (exp)]
    OPERATOR_AND  [reduce using rule 70 (exp)]
    OPERATOR_OR   [reduce using rule 70 (exp)]
    '>'           [reduce using rule 70 (exp)]
    '+'           [reduce using rule 70 (exp)]
    '-'           [reduce using rule 70 (exp)]
    '*'           [reduce using rule 70 (exp)]
    '/'           [reduce using rule 70 (exp)]
    '<'           [reduce using rule 70 (exp)]
    $default      reduce using rule 70 (exp)


State 129

   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp
   71    | exp OPERATOR_OR exp .

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110

    OPERATOR_LE   [reduce using rule 71 (exp)]
    OPERATOR_GE   [reduce using rule 71 (exp)]
    OPERATOR_EQ   [reduce using rule 71 (exp)]
    OPERATOR_NE   [reduce using rule 71 (exp)]
    OPERATOR_AND  [reduce using rule 71 (exp)]
    OPERATOR_OR   [reduce using rule 71 (exp)]
    '>'           [reduce using rule 71 (exp)]
    '+'           [reduce using rule 71 (exp)]
    '-'           [reduce using rule 71 (exp)]
    '*'           [reduce using rule 71 (exp)]
    '/'           [reduce using rule 71 (exp)]
    '<'           [reduce using rule 71 (exp)]
    $default      reduce using rule 71 (exp)


State 130

   52 print_elem: exp ',' print_elem .

    $default  reduce using rule 52 (print_elem)


State 131

   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   63    | exp '>' exp .
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110

    OPERATOR_LE   [reduce using rule 63 (exp)]
    OPERATOR_GE   [reduce using rule 63 (exp)]
    OPERATOR_EQ   [reduce using rule 63 (exp)]
    OPERATOR_NE   [reduce using rule 63 (exp)]
    OPERATOR_AND  [reduce using rule 63 (exp)]
    OPERATOR_OR   [reduce using rule 63 (exp)]
    '>'           [reduce using rule 63 (exp)]
    '+'           [reduce using rule 63 (exp)]
    '-'           [reduce using rule 63 (exp)]
    '*'           [reduce using rule 63 (exp)]
    '/'           [reduce using rule 63 (exp)]
    '<'           [reduce using rule 63 (exp)]
    $default      reduce using rule 63 (exp)


State 132

   58 exp: exp . '+' exp
   58    | exp '+' exp .
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110

    OPERATOR_LE   [reduce using rule 58 (exp)]
    OPERATOR_GE   [reduce using rule 58 (exp)]
    OPERATOR_EQ   [reduce using rule 58 (exp)]
    OPERATOR_NE   [reduce using rule 58 (exp)]
    OPERATOR_AND  [reduce using rule 58 (exp)]
    OPERATOR_OR   [reduce using rule 58 (exp)]
    '>'           [reduce using rule 58 (exp)]
    '+'           [reduce using rule 58 (exp)]
    '-'           [reduce using rule 58 (exp)]
    '*'           [reduce using rule 58 (exp)]
    '/'           [reduce using rule 58 (exp)]
    '<'           [reduce using rule 58 (exp)]
    $default      reduce using rule 58 (exp)


State 133

   58 exp: exp . '+' exp
   59    | exp . '-' exp
   59    | exp '-' exp .
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110

    OPERATOR_LE   [reduce using rule 59 (exp)]
    OPERATOR_GE   [reduce using rule 59 (exp)]
    OPERATOR_EQ   [reduce using rule 59 (exp)]
    OPERATOR_NE   [reduce using rule 59 (exp)]
    OPERATOR_AND  [reduce using rule 59 (exp)]
    OPERATOR_OR   [reduce using rule 59 (exp)]
    '>'           [reduce using rule 59 (exp)]
    '+'           [reduce using rule 59 (exp)]
    '-'           [reduce using rule 59 (exp)]
    '*'           [reduce using rule 59 (exp)]
    '/'           [reduce using rule 59 (exp)]
    '<'           [reduce using rule 59 (exp)]
    $default      reduce using rule 59 (exp)


State 134

   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   60    | exp '*' exp .
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110

    OPERATOR_LE   [reduce using rule 60 (exp)]
    OPERATOR_GE   [reduce using rule 60 (exp)]
    OPERATOR_EQ   [reduce using rule 60 (exp)]
    OPERATOR_NE   [reduce using rule 60 (exp)]
    OPERATOR_AND  [reduce using rule 60 (exp)]
    OPERATOR_OR   [reduce using rule 60 (exp)]
    '>'           [reduce using rule 60 (exp)]
    '+'           [reduce using rule 60 (exp)]
    '-'           [reduce using rule 60 (exp)]
    '*'           [reduce using rule 60 (exp)]
    '/'           [reduce using rule 60 (exp)]
    '<'           [reduce using rule 60 (exp)]
    $default      reduce using rule 60 (exp)


State 135

   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   61    | exp '/' exp .
   62    | exp . '<' exp
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110

    OPERATOR_LE   [reduce using rule 61 (exp)]
    OPERATOR_GE   [reduce using rule 61 (exp)]
    OPERATOR_EQ   [reduce using rule 61 (exp)]
    OPERATOR_NE   [reduce using rule 61 (exp)]
    OPERATOR_AND  [reduce using rule 61 (exp)]
    OPERATOR_OR   [reduce using rule 61 (exp)]
    '>'           [reduce using rule 61 (exp)]
    '+'           [reduce using rule 61 (exp)]
    '-'           [reduce using rule 61 (exp)]
    '*'           [reduce using rule 61 (exp)]
    '/'           [reduce using rule 61 (exp)]
    '<'           [reduce using rule 61 (exp)]
    $default      reduce using rule 61 (exp)


State 136

   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   62    | exp '<' exp .
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110

    OPERATOR_LE   [reduce using rule 62 (exp)]
    OPERATOR_GE   [reduce using rule 62 (exp)]
    OPERATOR_EQ   [reduce using rule 62 (exp)]
    OPERATOR_NE   [reduce using rule 62 (exp)]
    OPERATOR_AND  [reduce using rule 62 (exp)]
    OPERATOR_OR   [reduce using rule 62 (exp)]
    '>'           [reduce using rule 62 (exp)]
    '+'           [reduce using rule 62 (exp)]
    '-'           [reduce using rule 62 (exp)]
    '*'           [reduce using rule 62 (exp)]
    '/'           [reduce using rule 62 (exp)]
    '<'           [reduce using rule 62 (exp)]
    $default      reduce using rule 62 (exp)


State 137

   42 attribution: TK_IDENTIFIER '[' exp ']' . '=' exp

    '='  shift, and go to state 143


State 138

   37 lcmd: cmd ';' lcmd .

    $default  reduce using rule 37 (lcmd)


State 139

   43 flux_control: KW_IF '(' exp ')' KW_THEN . cmd
   44             | KW_IF '(' exp ')' KW_THEN . cmd KW_ELSE cmd

    KW_IF          shift, and go to state 53
    KW_WHILE       shift, and go to state 54
    KW_READ        shift, and go to state 55
    KW_RETURN      shift, and go to state 56
    KW_PRINT       shift, and go to state 57
    TK_IDENTIFIER  shift, and go to state 58
    '{'            shift, and go to state 59

    KW_IF          [reduce using rule 35 (cmd)]
    KW_WHILE       [reduce using rule 35 (cmd)]
    KW_READ        [reduce using rule 35 (cmd)]
    KW_RETURN      [reduce using rule 35 (cmd)]
    KW_PRINT       [reduce using rule 35 (cmd)]
    TK_IDENTIFIER  [reduce using rule 35 (cmd)]
    '{'            [reduce using rule 35 (cmd)]
    $default       reduce using rule 35 (cmd)

    cmd           go to state 144
    body          go to state 61
    attribution   go to state 62
    flux_control  go to state 63
    inout         go to state 64


State 140

   45 flux_control: KW_WHILE '(' exp ')' cmd .

    $default  reduce using rule 45 (flux_control)


State 141

   55 exp: TK_IDENTIFIER '[' exp ']' .

    $default  reduce using rule 55 (exp)


State 142

   72 exp: TK_IDENTIFIER '(' paramlist ')' .

    $default  reduce using rule 72 (exp)


State 143

   42 attribution: TK_IDENTIFIER '[' exp ']' '=' . exp

    TK_IDENTIFIER  shift, and go to state 74
    LIT_INTEGER    shift, and go to state 75
    LIT_CHAR       shift, and go to state 76
    '('            shift, and go to state 78
    '!'            shift, and go to state 79

    exp  go to state 145


State 144

   43 flux_control: KW_IF '(' exp ')' KW_THEN cmd .
   44             | KW_IF '(' exp ')' KW_THEN cmd . KW_ELSE cmd

    KW_ELSE  shift, and go to state 146

    KW_ELSE   [reduce using rule 43 (flux_control)]
    $default  reduce using rule 43 (flux_control)


State 145

   42 attribution: TK_IDENTIFIER '[' exp ']' '=' exp .
   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   62    | exp . '<' exp
   63    | exp . '>' exp
   66    | exp . OPERATOR_LE exp
   67    | exp . OPERATOR_GE exp
   68    | exp . OPERATOR_EQ exp
   69    | exp . OPERATOR_NE exp
   70    | exp . OPERATOR_AND exp
   71    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 98
    OPERATOR_GE   shift, and go to state 99
    OPERATOR_EQ   shift, and go to state 100
    OPERATOR_NE   shift, and go to state 101
    OPERATOR_AND  shift, and go to state 102
    OPERATOR_OR   shift, and go to state 103
    '>'           shift, and go to state 105
    '+'           shift, and go to state 106
    '-'           shift, and go to state 107
    '*'           shift, and go to state 108
    '/'           shift, and go to state 109
    '<'           shift, and go to state 110

    $default  reduce using rule 42 (attribution)


State 146

   44 flux_control: KW_IF '(' exp ')' KW_THEN cmd KW_ELSE . cmd

    KW_IF          shift, and go to state 53
    KW_WHILE       shift, and go to state 54
    KW_READ        shift, and go to state 55
    KW_RETURN      shift, and go to state 56
    KW_PRINT       shift, and go to state 57
    TK_IDENTIFIER  shift, and go to state 58
    '{'            shift, and go to state 59

    KW_IF          [reduce using rule 35 (cmd)]
    KW_WHILE       [reduce using rule 35 (cmd)]
    KW_READ        [reduce using rule 35 (cmd)]
    KW_RETURN      [reduce using rule 35 (cmd)]
    KW_PRINT       [reduce using rule 35 (cmd)]
    TK_IDENTIFIER  [reduce using rule 35 (cmd)]
    '{'            [reduce using rule 35 (cmd)]
    $default       reduce using rule 35 (cmd)

    cmd           go to state 147
    body          go to state 61
    attribution   go to state 62
    flux_control  go to state 63
    inout         go to state 64


State 147

   44 flux_control: KW_IF '(' exp ')' KW_THEN cmd KW_ELSE cmd .

    $default  reduce using rule 44 (flux_control)
